import traceback, sys, re
import typing
import random
import datetime

from functools import wraps

import discord
import discord.ext
import asyncio
import textwrap


from discord.ext import commands
from accessify import protected, private
from dataclasses import dataclass
from io import BytesIO
from PIL import Image, ImageDraw, ImageOps, ImageFont

from bot_params import (
    DEBUG_MODE, 
    MAIN_COLOR, 
    HELLCAT_ID, 
    MODERATOR_ROLE_ID, 
    GUILD_ID, 
    jerusalem_tz
)
from modules.logger import Logger
from _functions_base import *

log = Logger("log.log")

"""–ö–ª–∞—Å—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
class Ctx(commands.Context):
    pass

Ctx = commands.Context


"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
async def on_command_error(ctx: commands.Context, error):
    if isinstance(error, commands.MemberNotFound):
        await ctx.reply(f"–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ '**{error.argument}**'. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.reply(f"–ê—Ä–≥—É–º–µ–Ω—Ç **'{error.param.name}**' –Ω–µ —É–∫–∞–∑–∞–Ω.")
    elif isinstance(error, commands.BadArgument):
        error_message = error.args[0]
        new_error_message = re.sub(r'Converting to "(.*)" failed for parameter "(.*)".',
                                   r'–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ "**\1**" –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "**\2**".',
                                   error_message)
        await ctx.reply(new_error_message)
    elif isinstance(error, commands.CommandNotFound):
        log.error(f"Command '{ctx.message.content}' not find. Channel: {ctx.channel}")
    elif isinstance(error, commands.CheckFailure):
        log.error(f"Check failure. Command: {ctx.command} Channel: {ctx.channel}")
    elif isinstance(error, commands.MessageNotFound):
        log.error(f"Message not found. Channel: {ctx.channel}")
    elif isinstance(error, discord.errors.Forbidden) and error.code == 50013:
        log.error("Missing permissions")
    else:
        if ctx.command:
            log.error(f"Ignoring exception in command' {ctx.command}'. Channel: {ctx.channel}")
        else:
            log.error(f"Ignoring exception. Not executable command '{ctx.message.content}'. 'Channel: {ctx.channel}")
            
        if DEBUG_MODE:
            traceback.print_exception(type(error), error, error.__traceback__, file=sys.stderr)
    
async def on_check_failure(self, ctx, error):
    await ctx.reply("–≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–ª—å–∑—è –æ–±–∏–∂–∞—Ç—å :shield: ")
    return False

"""–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã"""
def is_hellcat():
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            ctx: Ctx = args[0] if func.__qualname__.split('.')[0] == func.__name__ else args[1]
            if ctx is False:
                return await func(*args, **kwargs)
            
            elif ctx.author.id == HELLCAT_ID:
                return await func(*args, **kwargs)
            
            else:
                return await ctx.reply("*–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤*üíî")
        return wrapper
    return decorator

def is_moder_or_admin():
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            ctx: Ctx = args[0] if func.__qualname__.split('.')[0] == func.__name__ else args[1]
            if ctx is False:
                return await func(*args, **kwargs)
            
            elif MODERATOR_ROLE_ID in [r.id for r in ctx.author.roles] or ctx.author.guild_permissions.administrator:
                return await func(*args, **kwargs)
            
            else:
                return await ctx.reply("*–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤*üíî")
        return wrapper
    return decorator

def is_disabled():
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            ctx: Ctx = args[0] if func.__qualname__.split('.')[0] == func.__name__ else args[1]
            return await ctx.message.reply("–ö–æ–º–∞–Ω–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞üîí")
        return wrapper
    return decorator

def is_on_maintenance():
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            ctx: Ctx = args[0] if func.__qualname__.split('.')[0] == func.__name__ else args[1]
            return await ctx.message.reply("–î–ª—è —ç—Ç–æ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ãüîß")
        return wrapper
    return decorator

def arguments_required():
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            ctx: Ctx = args[0] if func.__qualname__.split('.')[0] == func.__name__ else args[1]
            if len(args) < (2 if func.__qualname__.split('.')[0] == func.__name__ else 3):
                return await ctx.message.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ãüò∂")
            return await func(ctx, *args, **kwargs)
        return wrapper
    return decorator


"""–§—É–Ω–∫—Ü–∏–∏"""
class DiscordFunctions:
    def __init__(self):
        
        
        self.guild_id = GUILD_ID
        self.bot = None
        
        
class Fetch_member(DiscordFunctions):
    def __init__(self):
        super().__init__()
        
    async def __call__(self, member_id):
        
        from __init__ import bot
        self.bot = bot
        
        guild: discord.Guild = self.bot.get_guild(self.guild_id)
        try:
            member: discord.Member = await guild.fetch_member(member_id)
        except discord.errors.NotFound:
            return None
        return member

"""–ö–ª–∞—Å—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
class Paginator:
    def __init__(self, ctx: Ctx, pages, field_generator, timeout=60):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ Paginator.
        
        :param ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã Discord.
        :param pages: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
        :param field_generator: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π embed. 
                                –î–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å tuple (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∑–Ω–∞—á–µ–Ω–∏–µ).
        :param timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).
        """
        from __init__ import bot
        
        self.bot = bot
        self.ctx: Ctx = ctx
        self.author = ctx.author
        self.pages = pages
        self.page_index = 0
        self.field_generator = field_generator
        self.timeout = timeout
        self.msg: discord.Message = None

    @private
    async def send_page(self):
        embed = discord.Embed(
            title=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.page_index + 1}/{len(self.pages)}",
            description=f"–°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(self.pages[self.page_index])}",
            color=MAIN_COLOR
        )
        for item in self.pages[self.page_index]:
            name, value = self.field_generator(item)
            embed.add_field(name=name, value=value)

        if self.msg is None:
            self.msg = await self.ctx.send(embed=embed)
            await self.msg.add_reaction("‚¨ÖÔ∏è")
            await self.msg.add_reaction("‚û°Ô∏è")
            return self.msg
        else:
            return await self.msg.edit(embed=embed)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏
    def check_reaction(self, reaction: discord.Reaction, user):
        return user == self.author and str(reaction.emoji) in ["‚¨ÖÔ∏è", "‚û°Ô∏è"]
    
    @staticmethod
    def prepare_for_paginate(objects: dict[dict[dict]], content: str, formats: list[str], max_chars_per_page=6000) -> list[list[dict]]:
        pages = []
        current_page = []
        current_page_length = 0
        

        for obj in objects:
            obj = objects[obj]
            content = content.format(*[obj[f] for f in formats])
            thread_content = content  # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–µ–¥–∞
            thread_length = len(thread_content)

            # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–¥–∞ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if current_page_length + thread_length > max_chars_per_page:
                pages.append(current_page)
                current_page = []
                current_page_length = 0

            current_page.append(obj)
            current_page_length += thread_length

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
        if current_page:
            pages.append(current_page)

        return pages

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    async def paginate(self):
        self.ctx = await self.bot.get_context(await self.send_page())
        
        while True:
            try:
                reaction, user = await self.ctx.bot.wait_for('reaction_add', timeout=self.timeout, check=self.check_reaction)
                if str(reaction.emoji) == "‚û°Ô∏è" and self.page_index < len(self.pages) - 1:
                    self.page_index += 1
                    await self.msg.remove_reaction(reaction, self.author)
                    await self.send_page()
                elif str(reaction.emoji) == "‚¨ÖÔ∏è" and self.page_index > 0:
                    self.page_index -= 1
                    await self.msg.remove_reaction(reaction, self.author)
                    await self.send_page()
            except asyncio.TimeoutError:
                await atrys(self.msg.clear_reactions)
                break

class TextPaginator(Paginator):
    def __init__(self, ctx: Ctx, pages: list[list[str]], timeout=60):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ Paginator.
        
        :param ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã Discord.
        :param pages: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫.
        :param timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).
        """
        super().__init__(ctx, pages, None, timeout)
        
    async def send_page(self):
        embed = discord.Embed(
            title=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.page_index + 1}/{len(self.pages)}",
            color=MAIN_COLOR,
            description=''
        )
        for item in self.pages[self.page_index]:
            embed.description += item + '\n'
        
        if self.msg is None:
            self.msg = await self.ctx.send(embed=embed)
            await self.msg.add_reaction("‚¨ÖÔ∏è")
            await self.msg.add_reaction("‚û°Ô∏è")
            return self.msg
        else:
            return await self.msg.edit(embed=embed)
        
    @staticmethod
    def prepare_for_paginate(text: str, max_chars_per_page=6000) -> list[list[str]]:
        page = []
        pages = []
        text = text.split('\n')
        for l in text:
            if l in ['', ' ', '\n']:
                text.remove(l)
        
        
        for l in text:
            if len(''.join(page)) + len(l) < max_chars_per_page - 8:
                page.append(f"```js\n{l + " "}```")
            else:
                pages.append(page[:])
                page = []
        if page:
            pages.append(page)
            
        return pages
    
"""–ö–ª–∞—Å—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Ä—Ç–æ–≤"""

@dataclass
class FakeMessage():
    """ –ö–ª–∞—Å—Å, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é discord.Message –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤—â–∏–∫–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ """

    content: str = None
    reactions: typing.List[discord.Reaction] = ()
    mentions: typing.List[discord.Member] = ()
class Report():
    """ –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ """

    def __init__(self, member: typing.Optional[discord.Member], alert_channel: discord.TextChannel = None):
        
        self.alert_channel = alert_channel

        offset = datetime.timedelta(hours=3)
        self.tz = jerusalem_tz


        self.id = random.randint(1, 1000000)
        self.member = member
        self.img_filename = f"{self.id}.png"
        self.img_file: discord.File = None 
        self.attachments: list[discord.File] = [] 
        self.embeds: list[discord.Embed] = []


        self.time = datetime.datetime.now(tz=self.tz).strftime("%d %B - %H:%M")
        self._title = ""
        self._desc = ""
        self.color = discord.Colour.random()

    @property
    def desc(self):
        return self._desc
    
    @desc.setter
    def desc(self, args):
        try:
            name = args[0]
            value = args[1]
        except:
            log.error("Invalid arguments for desc setter")
        else:
            self._desc += f"\n**{name}:** {value}"

    @property
    def title(self):
        return self._title
    
    @title.setter
    def title(self, title):
        self._title = title

    @private
    def _get_main_embed(self):
        embed = discord.Embed(title=self.title, description=self.desc, color=self.color)
        embed.set_image(url=f"attachment://{self.img_filename}")
        return embed

    async def create_img(self, messages):

        TEXT_COLOR = discord.Color.light_embed().to_rgb()
        DATE_COLOR = discord.Color.light_gray().to_rgb()

        FONT_SIZE = 24

        SMALL_FONT = ImageFont.truetype("cogs/delcog/NotoSans-Regular.ttf", FONT_SIZE - 10) # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç (–¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏)
        NORMAL_FONT = ImageFont.truetype("cogs/delcog/NotoSans-Regular.ttf", FONT_SIZE) # –û–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç (—Ç–µ–∫—Å—Ç)
        BOLD_FONT = ImageFont.truetype("cogs/delcog/NotoSans-Medium.ttf", FONT_SIZE) # –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç (–Ω–∏–∫–Ω–µ–π–º)

        BACKGROUND_COLOR = (54, 57, 63)

        # –ö–æ–Ω—Ç–µ–Ω—Ç = –∞–≤–∞—Ç–∞—Ä–∫–∞ + –Ω–∏–∫–Ω–µ–π–º + —Ç–µ–∫—Å—Ç + –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ, –∫–æ—Ä–æ—á–µ –≤—Å—ë –∫—Ä–æ–º–µ —Ñ–æ–Ω–∞ –≤—Ö–æ–¥–∏—Ç –≤ –±–ª–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

        CONTENT_X = 15  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        # –ò–∑–º–µ–Ω—è—Ç—å –¥–ª—è —Å–º–µ—â–µ–Ω–∏—è –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ

        CONTENT_Y = 10  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        # –ò–∑–º–µ–Ω—è—Ç—å –¥–ª—è —Å–º–µ—â–µ–Ω–∏—è –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑

        DISTANCE_BETWEEN_AVATAR_AND_TEXTBOX = 90 # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ª–µ–≤—ã–º –∫—Ä–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
        DISTANCE_BETWEEN_NAME_AND_DATE = 5 # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –Ω–∏–∫–Ω–µ–π–º–æ–º –∏ –¥–∞—Ç–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        ONE_MESSAGE_HEIGHT = 40 # –í—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–≥–æ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        TEXTBOX_X = CONTENT_X + DISTANCE_BETWEEN_AVATAR_AND_TEXTBOX # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ —Ç–µ–∫—Å—Ç–∞
        TEXTBOX_Y = CONTENT_Y - 2 # –ú–∏–Ω—É—Å —á—Ç–æ–±—ã –≤—ã—Ä–æ–≤–Ω—è—Ç—å –≤ –æ–¥–Ω—É –ª–∏–Ω–∏—é —Ç–µ–∫—Å—Ç –∏ –∞–≤–∞—Ç–∞—Ä–∫—É

        for i, message in enumerate(messages): # –í–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è, –Ω–∞ –∏—Ö –º–µ—Å—Ç–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∞–¥–ø–∏—Å—å [–í–ª–æ–∂–µ–Ω–∏–µ]
            if message.attachments or message.embeds:
                if len(message.attachments) == 1 or len(message.embeds) == 1:
                    messages = list(messages[:i+1]) + [FakeMessage(content = "[–≤–ª–æ–∂–µ–Ω–∏–µ]")] + list(messages[i+1:])
                elif len(message.attachments) > 1 or len(message.embeds) > 1:
                    messages = list(messages[:i+1]) + [FakeMessage(content = "[–≤–ª–æ–∂–µ–Ω–∏—è]")] + list(messages[i+1:])


        height_increase = 40 * (len(messages)) + 5 # –ù–∞ –∫–∞–∂–¥–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤—ã—Å–æ—Ç—É –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è 40 –ø–∏–∫—Å–µ–ª–µ–π + –æ—Ç—Å—Ç—É–ø –≤ –∫–æ–Ω—Ü–µ
        img_size = (750, 60 + height_increase) # –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏


        img = Image.new(mode='RGB', size=img_size, color=BACKGROUND_COLOR) # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img_draw = ImageDraw.Draw(img) # –û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏


        messages_author: discord.Member = messages[0].author
        date = messages[0].created_at.strftime("%d.%m.%Y %H:%M")
        nickname = messages_author.display_name
        nickname_color = messages_author.color.to_rgb()


        member_avatar = Image.open(BytesIO(await messages_author.display_avatar.with_size(64).read()))
        mask = Image.open("cogs/delcog/mask.png").convert('L')
        member_avatar = ImageOps.fit(member_avatar, mask.size, centering = (0.5, 0.5)) # –û–∫—Ä—É–≥–ª–∏–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏


        if nickname_color == discord.Color.default().to_rgb(): # –ï—Å–ª–∏ —Ü–≤–µ—Ç –Ω–∏–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            nickname_color = TEXT_COLOR


        img_draw.text((TEXTBOX_X, TEXTBOX_Y), nickname, nickname_color, font = BOLD_FONT) # —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞
        #img_draw.text((TEXTBOX_X + (len(without_spaces(nickname)) * (FONT_SIZE - 4)) + nickname.count(" ") * 2, TEXTBOX_Y + 10), date, DATE_COLOR, font = SMALL_FONT) # —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        img.paste(member_avatar, (CONTENT_X, CONTENT_Y), mask = mask) # —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏


        previous_position = TEXTBOX_Y - 5 # –ü–æ–∑–∏—Ü–∏—è –ø–æ Y –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. 

        for message in messages:
            message_text = textwrap.fill(message.content, width = 40, replace_whitespace = False)

            for member in message.mentions: # –∑–∞–º–µ–Ω—è–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ @–Ω–∏–∫–Ω–µ–π–º
                message_text = re.sub(f"<@{member.id}>", f"@{member.display_name}", message_text)

            strings_amount = len(message_text.splitlines())

            if strings_amount > 1:
                img_size = (img_size[0], img_size[1] + ONE_MESSAGE_HEIGHT * strings_amount - ONE_MESSAGE_HEIGHT - 10)
                old_img = img
                img = Image.new(mode = 'RGB', size = img_size, color = BACKGROUND_COLOR)
                img_draw = ImageDraw.Draw(img)
                img.paste(old_img)

            string_pos = previous_position + ONE_MESSAGE_HEIGHT

            if message.content:

                color = TEXT_COLOR
                if isinstance(message, FakeMessage): 
                    color = DATE_COLOR

                img_draw.multiline_text(xy = (TEXTBOX_X, string_pos), 
                                        text = message_text, 
                                        fill = color, 
                                        font = NORMAL_FONT,
                                        spacing = ONE_MESSAGE_HEIGHT / 3)
                

            previous_position = previous_position + ONE_MESSAGE_HEIGHT * strings_amount


        return img

    async def upload_all(self, messages):
        await self.upload_attachments(messages)
        await self.upload_embeds(messages)

    async def upload_attachments(self, messages):
        for message in messages:
            self.attachments.extend([discord.File(fp = BytesIO(await a.read()), filename = a.filename) for a in message.attachments])
            
    async def upload_embeds(self, messages: list[discord.Message]):
        for message in messages:
            for e in message.embeds:
                self.embeds.append(e)
                
    def set_image(self, img):
        if type(img) == list:
            main_img = Image.new(mode="RGB", size=(750, sum([image.height for image in img])))
            height = 0
            
            for image in img:
                main_img.paste(image, (0, height))
                height += image.height
            else:
                img = main_img
                
        if img:
            imgb = BytesIO()
            img.save(imgb, format = "PNG")
            imgb.seek(0)
            self.img_file = discord.File(fp = imgb, filename = self.img_filename)

    async def send(self, output_channel: discord.TextChannel=None):
        output_channel = self.alert_channel if output_channel is None else output_channel
        main_embed = self._get_main_embed()
        sub_embeds = []

        if self.attachments:
            for i, a in enumerate(self.attachments):
                e = discord.Embed(description = f"–í–ª–æ–∂–µ–Ω–∏–µ {i+1}", color = self.color)
                e.set_image(url = f"attachment://{a.filename}")
                sub_embeds.append(e)
            #sub_embeds.extend([discord.Embed(url = f"attachment://{a.filename}", description = f"–í–ª–æ–∂–µ–Ω–∏–µ {i}", color = self.color) for i, a in enumerate(self.attachments)])
        if self.embeds:
            sub_embeds.extend(*self.embeds)
        
        
        if type(output_channel) is not discord.Thread:
            report_msg = await output_channel.send(file = self.img_file, embed = main_embed)
            return report_msg
        else:
            if self.attachments or self.embeds:
                message = await output_channel.send(embeds = sub_embeds, files = self.attachments)

"""–ö–ª–∞—Å—Å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ embed"""
class FormatEmbed(Embed):
    def __init__(self, title, description=None, color=None):
        super().__init__(title=title, description=description, color=color)  
        
    def format(self, *args: list[str], **kwargs: dict[str:object]):
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        title_args_count = self.title.count('{}')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if title_args_count > 0:
            self.title = self.title.format(*args[:title_args_count])

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
        description_args_count = self.description.count('{}')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –ø–µ—Ä–µ–¥–∞–≤–∞—è –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if description_args_count > 0:
            self.description = self.description.format(*args[title_args_count:title_args_count + description_args_count])
        
        return self
    