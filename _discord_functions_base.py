import traceback, sys, re

from functools import wraps

import discord
import discord.ext
import asyncio

from discord.ext import commands
from accessify import protected, private

from bot_params import DEBUG_MODE, MAIN_COLOR, HELLCAT_ID

"""–ö–ª–∞—Å—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
class Ctx(commands.Context):
    pass

Ctx = commands.Context


"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
async def on_command_error(ctx: commands.Context, error):
    if isinstance(error, commands.MemberNotFound):
        await ctx.reply(f"–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ '**{error.argument}**'. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.reply(f"–ê—Ä–≥—É–º–µ–Ω—Ç **'{error.param.name}**' –Ω–µ —É–∫–∞–∑–∞–Ω.")
    elif isinstance(error, commands.BadArgument):
        error_message = error.args[0]
        new_error_message = re.sub(r'Converting to "(.*)" failed for parameter "(.*)".',
                                   r'–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ "**\1**" –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "**\2**".',
                                   error_message)
        await ctx.reply(new_error_message)
    else:
        if ctx.command:
            error(f"–ò–≥–Ω–æ—Ä–∏—Ä—É—é –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ '{ctx.command}'")
        else:
            error(f"–ò–≥–Ω–æ—Ä–∏—Ä—É—é –∏—Å–∫–ª—é—á–µ–Ω–∏–µ. –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞ '{ctx.message.content}'")
        if DEBUG_MODE:
            traceback.print_exception(type(error), error, error.__traceback__, file=sys.stderr)

"""–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã"""
def is_hellcat():
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            ctx: Ctx = args[0] if func.__qualname__.split('.')[0] == func.__name__ else args[1]
                
            if ctx.author.id == HELLCAT_ID:
                return await func(*args, **kwargs)
            else:
                return await ctx.reply("*–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤*üíî")
        return wrapper
    return decorator
            
# –ö–ª–∞—Å—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
class Paginator:
    def __init__(self, ctx: Ctx, pages, field_generator, timeout=60):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ Paginator.
        
        :param ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã Discord.
        :param pages: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
        :param field_generator: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π embed. 
                                –î–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å tuple (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∑–Ω–∞—á–µ–Ω–∏–µ).
        :param timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).
        """
        from __init__ import bot
        
        self.bot = bot
        self.ctx: Ctx = ctx
        self.author = ctx.author
        self.pages = pages
        self.page_index = 0
        self.field_generator = field_generator
        self.timeout = timeout
        self.msg: discord.Message = None

    @private
    async def send_page(self):
        embed = discord.Embed(
            title=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.page_index + 1}/{len(self.pages)}",
            description=f"–°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(self.pages[self.page_index])}",
            color=MAIN_COLOR
        )
        for item in self.pages[self.page_index]:
            name, value = self.field_generator(item)
            embed.add_field(name=name, value=value)

        if self.msg is None:
            self.msg = await self.ctx.send(embed=embed)
            await self.msg.add_reaction("‚¨ÖÔ∏è")
            await self.msg.add_reaction("‚û°Ô∏è")
            return self.msg
        else:
            return await self.msg.edit(embed=embed)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏
    def check_reaction(self, reaction: discord.Reaction, user):
        return user == self.author and str(reaction.emoji) in ["‚¨ÖÔ∏è", "‚û°Ô∏è"]
    
    @staticmethod
    def prepare_for_paginate(objects: dict[dict[dict]], content: str, formats: list[str], max_chars_per_page=6000) -> list[list[dict]]:
        pages = []
        current_page = []
        current_page_length = 0
        

        for obj in objects:
            obj = objects[obj]
            content = content.format(*[obj[f] for f in formats])
            thread_content = content  # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–µ–¥–∞
            thread_length = len(thread_content)

            # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–¥–∞ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if current_page_length + thread_length > max_chars_per_page:
                pages.append(current_page)
                current_page = []
                current_page_length = 0

            current_page.append(obj)
            current_page_length += thread_length

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
        if current_page:
            pages.append(current_page)

        return pages

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    async def paginate(self):
        self.ctx = await self.bot.get_context(await self.send_page())
        
        while True:
            try:
                reaction, user = await self.ctx.bot.wait_for('reaction_add', timeout=self.timeout, check=self.check_reaction)
                if str(reaction.emoji) == "‚û°Ô∏è" and self.page_index < len(self.pages) - 1:
                    self.page_index += 1
                    await self.msg.remove_reaction(reaction, self.author)
                    await self.send_page()
                elif str(reaction.emoji) == "‚¨ÖÔ∏è" and self.page_index > 0:
                    self.page_index -= 1
                    await self.msg.remove_reaction(reaction, self.author)
                    await self.send_page()
            except asyncio.TimeoutError:
                await self.msg.clear_reactions()
                break

class TextPaginator(Paginator):
    def __init__(self, ctx: Ctx, pages: list[list[str]], timeout=60):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ Paginator.
        
        :param ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã Discord.
        :param pages: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫.
        :param timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).
        """
        super().__init__(ctx, pages, None, timeout)
        
    async def send_page(self):
        embed = discord.Embed(
            title=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.page_index + 1}/{len(self.pages)}",
            color=MAIN_COLOR,
            description=''
        )
        for item in self.pages[self.page_index]:
            embed.description += item + '\n'
        
        if self.msg is None:
            self.msg = await self.ctx.send(embed=embed)
            await self.msg.add_reaction("‚¨ÖÔ∏è")
            await self.msg.add_reaction("‚û°Ô∏è")
            return self.msg
        else:
            return await self.msg.edit(embed=embed)
        
    @staticmethod
    def prepare_for_paginate(text: str, max_chars_per_page=6000) -> list[list[str]]:
        page = []
        pages = []
        text = text.split('\n')
        for l in text:
            if l in ['', ' ', '\n']:
                text.remove(l)
        
        
        for l in text:
            if len(''.join(page)) + len(l) < max_chars_per_page - 8:
                page.append(f"```js\n{l + " "}```")
            else:
                pages.append(page[:])
                page = []
        if page:
            pages.append(page)
            
        return pages
