import random
from datetime import timedelta
import datetime

from __init__ import *

TIMEOUT = 20 ## –í—Ä–µ–º—è —Ç–∞–π–º–∞—É—Ç–∞ –∫–Ω–æ–ø–æ–∫
MUTE = timedelta(minutes=15) # –í—Ä–µ–º—è –º—É—Ç–∞ –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏
DIED_CHANCE = 5 # –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –¥–µ–ª–∏—Ç–µ–ª—å => 1 / DIED_CHANCE ## –®–∞–Ω—Å —É–º–µ—Ä–µ—Ç—å

class Russian_roulette(discord.ui.View):
    success_messages = ["–°–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ –≤–µ–∑—ë—Ç :)", "–¢—ã –≤—ã–∂–∏–ª", "–¢—ã –ø–æ–±–µ–¥–∏–ª", "**–£–¥–∞—á–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞**", "–°—Ö–æ–¥–∏ –≤ –ª–æ—Ç–µ—Ä–µ—é, —Å–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å", "—É —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è üåπ"] ## –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Å–µ—á–∫–µ
    failure_messages = ["–ë–£–ú –∏ —Ç—ã –æ—Ç–ª–µ—Ç–∞–µ—à—å!", "**YOU DIED**", "–ü–æ–∫–∞-–ø–æ–∫–∞!)", "–î–∞ —Ç—ã —Å–Ω–∞–π–ø–µ—Ä! –¢–æ—á–Ω–æ –≤ —Ü–µ–ª—å)", "–ù—É, –≤ –ª—é–±–≤–∏ —É–∂–µ –Ω–µ –ø–æ–≤–µ–∑—ë—Ç"] ## –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Å—Ç—Ä–µ–ª–µ
    
    ## –≠–º–±–µ–¥—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –æ—Å–µ—á–∫–µ
    success_embed = discord.Embed(
        title="–ü–£–°–¢–û",  
        color=discord.Color.lighter_grey()
        )
    
    ## –≠–º–±–µ–¥—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –≤—ã—Å—Ç—Ä–µ–ª–µ
    failure_embed = discord.Embed(
        title="–í–´–°–¢–†–ï–õ!!!",  
        color=discord.Color.red()
        )
    
    def __init__(self, ctx):
        super().__init__(timeout=TIMEOUT)
        self.value = None
        self.died = False
        self.ctx: Ctx = ctx
        
    async def interaction_check(self, interaction: discord.Interaction):
        return interaction.user.id == self.ctx.message.author.id

    @discord.ui.button(label='–°–ø—É—Å–∫', style=discord.ButtonStyle.red)
    async def shoot(self, interaction: discord.Interaction, button: discord.ui.Button):
        '''! shoot - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–ø—É—Å–∫"'''
        
        if not await Russian_roulette.interaction_check(self, interaction):
            return
                
        if random.randint(0, DIED_CHANCE):
            await self.ctx.send(Russian_roulette.success_messages[random.randint(0, len(Russian_roulette.success_messages)) - 1])
            await interaction.message.edit(embed=Russian_roulette.success_embed)
            self.died = False
        else:
            await self.ctx.send(Russian_roulette.failure_messages[random.randint(0, len(Russian_roulette.failure_messages) ) - 1])
            await interaction.message.edit(embed=Russian_roulette.failure_embed)
            self.died = True
        self.value = True
        await interaction.message.edit(view=None)
        self.stop()
        
    @discord.ui.button(label='–ó–∞—Å—Å–∞–ª', style=discord.ButtonStyle.gray)
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        
        '''! cancel - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞—Å—Å–∞–ª"'''
        self.value = False
        await self.ctx.message.delete()
    
        await interaction.message.delete()
        self.stop()
        
class Rock_paper_scissors(discord.ui.View):
    
    
    
    def __init__(self, ctx):
        super().__init__(timeout=TIMEOUT)
        self.ctx = ctx
        self.players: list[discord.Member] = []
        self.winner = None
        
        self.embed = discord.Embed(
        title="–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞",
        description="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
        color=discord.Color.yellow()
    )
    
    async def interaction_check(self, interaction: discord.Interaction):
        return True#interaction.user.id == self.ctx.message.author.id
    
    async def end_of_game(self, interaction: discord.Interaction):
        if len(self.players) >= 2:
            player1, player2 = self.players
            if player1[1] == player2[1]:
                self.winner =f"–ù–∏—á—å—è, {player1[0]} –ø—Ä–æ—Ç–∏–≤ {player2[0]}\n-# –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–±–µ–¥–∏–ª, –æ–±–∞ –≤—ã–±—Ä–∞–ª–∏ {player1[1]}(("
                
            elif player1[1] == "rock" and player2[1] == "scissors":
                self.winner = f"**<@{player1[0].id}> –ø–æ–±–µ–¥–∏–ª <@{player2[0].id}>!**\n-# **–ö–∞–º–µ–Ω—å** –æ—Ç–º—É–¥–æ—Ö–∞–ª **–Ω–æ–∂–Ω–∏—Ü—ã**"
            elif player1[1] == "scissors" and player2[1] == "paper":
                self.winner = f"**<@{player1[0].id}> –ø–æ–±–µ–¥–∏–ª <@{player2[0].id}>!**\n-# **–ù–æ–∂–Ω–∏—Ü—ã** –ø–æ—á–∏–∫–∞–ª–∏ **–±—É–º–∞–≥—É**"
            elif player1[1] == "paper" and player2[1] == "rock":
                self.winner = f"**<@{player1[0].id}> –ø–æ–±–µ–¥–∏–ª <@{player2[0].id}>!**\n-# **–ë—É–º–∞–≥–∞** —Å—Ö–∞–≤–∞–ª–∞ **–∫–∞–º–µ–Ω—å**"
                
            elif player2[1] == "rock" and player1[1] == "scissors":
                self.winner = f"**<@{player2[0].id}> –ø–æ–±–µ–¥–∏–ª <@{player1[0].id}>!**\n-# **–ö–∞–º–µ–Ω—å** –æ—Ç–º—É–¥–æ—Ö–∞–ª **–Ω–æ–∂–Ω–∏—Ü—ã**"
            elif player2[1] == "scissors" and player1[1] == "paper":
                self.winner = f"**<@{player2[0].id}> –ø–æ–±–µ–¥–∏–ª <@{player1[0].id}>!**\n-# **–ù–æ–∂–Ω–∏—Ü—ã** –ø–æ—á–∏–∫–∞–ª–∏ **–±—É–º–∞–≥—É**"
            elif player2[1] == "paper" and player1[1] == "rock":
                self.winner = f"**<@{player2[0].id}> –ø–æ–±–µ–¥–∏–ª <@{player1[0].id}>!**\n-# **–ë—É–º–∞–≥–∞** —Å—Ö–∞–≤–∞–ª–∞ **–∫–∞–º–µ–Ω—å**"
            
            self.embed.description = f"**–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!**\n{self.winner}"
            await interaction.message.edit(embed=self.embed, view=None)
            self.stop()

    @discord.ui.button(label='üß±', style=discord.ButtonStyle.primary)
    async def rock(self, interaction: discord.Interaction, button: discord.ui.Button):
        
        '''! rock - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ö–∞–º–µ–Ω—å"'''
        if not interaction.user in [player[0] for player in self.players]:
            self.players.append((interaction.user, "rock"))
        await self.end_of_game(interaction)
        await interaction.response.defer()
        
    @discord.ui.button(label='‚úÇ', style=discord.ButtonStyle.primary)
    async def scissors(self, interaction: discord.Interaction, button: discord.ui.Button):
        
        '''! scissors - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–æ–∂–Ω–∏—Ü—ã"'''
        if not interaction.user in [player[0] for player in self.players]:
            self.players.append((interaction.user, "scissors"))
        await self.end_of_game(interaction)
        await interaction.response.defer()
        
    @discord.ui.button(label='üì∞', style=discord.ButtonStyle.primary)
    async def paper(self, interaction: discord.Interaction, button: discord.ui.Button):
        
        '''! paper - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ë—É–º–∞–≥–∞"'''
        if not interaction.user in [player[0] for player in self.players]:
            self.players.append((interaction.user, "paper"))
        await self.end_of_game(interaction)
        await interaction.response.defer()
        

TIMEOUT = 10  # –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
failed_texts = ["–æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω–∫–∏", "—Å–¥–æ—Ö", "–¥–µ–¥–∏–Ω—Å–∞–π–¥", "–¥–µ–¥–∞—É—Ç—Å–∞–π–¥", "–¥–µ–¥", "–ø–æ–π–º–∞–ª –º–µ–∂–¥—É –≥–ª–∞–∑", "–ø–æ–∫—Ä–∞—Å–∏–ª –∞—Å—Ñ–∞–ª—å—Ç", "–ª–æ—Ö", "—Å–ª–∏—Ç", "—Å–ª–∏—Ç –∫–∞–∫ –±–æ—Ç–∏–∫", "—â–∞–≤–µ–ª—å"]
class DuelGame(discord.ui.View):
    class Confirm(discord.ui.View):
        def __init__(self, ctx: Ctx):
            super().__init__(timeout=TIMEOUT)
            self.ctx = ctx
            self.value = None
            self.message: discord.Message = None
            
        async def interaction_check(self, interaction: discord.Interaction) -> bool:
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            return interaction.user == self.ctx.message.mentions[0]
        
        async def on_timeout(self):
            # –î–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ
            await self.message.edit(view=None)
            self.value = False
            
        @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", style=discord.ButtonStyle.green)
        async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
            self.value = True
            await self.message.edit(view=None)
            self.stop()
            
        @discord.ui.button(label="–°—Ç—Ä—É—Å–∏—Ç—å", style=discord.ButtonStyle.red)
        async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
            self.value = False
            await self.message.edit(view=None)
            self.stop()
    
    class StartGame(discord.ui.View):
        def __init__(self, ctx: Ctx, players: list[discord.Member]):
            super().__init__(timeout=TIMEOUT)
            self.ctx = ctx
            self.value = False
            self.players = players
            self.confirmed = []
            
        async def interaction_check(self, interaction: discord.Interaction) -> bool:
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            return interaction.user in self.players and not interaction.user in self.confirmed
        
        async def on_timeout(self):
            # –î–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ
            await atrys(self.ctx.message.delete)
            self.value = False
            
        @discord.ui.button(label="–ù–∞—á–∞—Ç—å", style=discord.ButtonStyle.green)
        async def start(self, interaction: discord.Interaction, button: discord.ui.Button):
            self.value = True
            self.confirmed.append(interaction.user)
            self.clear_items()
            await interaction.response.defer()
            self.stop()
            
        
    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        return interaction.user in self.players
    
    async def on_timeout(self):
        # –î–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ
        if not self.winner:
            await self.ctx.message.edit(embed=self.timeout_embed.format(self.players[0], self.players[1]), view=None)
        
    @discord.ui.button(label="–û–≥–æ–Ω—å", style=discord.ButtonStyle.red)
    async def shoot_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∞–∫—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
        reaction_time = (discord.utils.utcnow() - self.start_time).total_seconds()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â—ë –Ω–µ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
        if interaction.user not in self.results:
            self.results[interaction.user] = reaction_time
            start_embed = self.start_embed
            start_embed.description = f"{interaction.user.display_name} –≤—ã—Å—Ç—Ä–µ–ª–∏–ª!üí•"
            await interaction.message.edit(embed=start_embed)
        
        if len(self.results) == 2 and not self.winner:
            await interaction.response.edit_message(view=None)
            await self.determine_winner()
        else:
            await interaction.response.defer()
            
                
    def __init__(self, ctx: Ctx):
        super().__init__(timeout=TIMEOUT)
        self.ctx = ctx
        self.players: list[discord.Member] = []
        self.start_confirms = []
        self.winner = None
        self.time = None
        self.start_time = None  # –í—Ä–µ–º—è, –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è
        self.results = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∂–∞—Ç–∏—è
        self.mute = random.randint(1, 15)

        embed = discord.Embed(
        title="–î—É—ç–ª—å",
        description="–ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ —Ç–æ—á–Ω–µ–µ –ø—Ä–∏—Ü–µ–ª–∏—Ç—Å—è –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏!",
        color=discord.Color.dark_gold()
    )
        self.description_embed = FormatEmbed(
            title="–î—É—ç–ª—å –º–µ–∂–¥—É {} –∏ {}",
            description="### –ß—Ç–æ –±—ã –ø–æ–ø–∞—Å—Ç—å, —Ü–µ–ª—å—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –±–ª–∏–∂–µ –∫ {} —Å–µ–∫—É–Ω–¥–∞–º –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏!",
            color=discord.Color.light_gray()
        )
        self.start_embed = FormatEmbed(
            title="–î—É—ç–ª—å –º–µ–∂–¥—É {} –∏ {}",
            description="### –ñ–¥–∏ {} —Å–µ–∫—É–Ω–¥ –∏ —Å—Ç—Ä–µ–ª—è–π! ‚è±",
            color=discord.Color.lighter_gray()
        )   
        self.end_embed = FormatEmbed(
            title="–î—É—ç–ª—å –º–µ–∂–¥—É {} –∏ {}",
            description="### –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {}!\n**–¶–µ–ª—å: {}** \n\n—Ä–µ–∑—É–ª—å—Ç–∞—Ç: {} \n—Ä–∞–∑–Ω–∏—Ü–∞ {}\n\n### –ü–ª–æ—Ö–æ–π –∫–æ–≤–±–æ–π: {}\n—Ä–µ–∑—É–ª—å—Ç–∞—Ç: {} \n—Ä–∞–∑–Ω–∏—Ü–∞ {}",
            color=discord.Color.yellow()
        )
        self.timeout_embed = FormatEmbed(
            title="–î—É—ç–ª—å –º–µ–∂–¥—É {} –∏ {}",
            description="# –í—Ä–µ–º—è –≤—ã—à–ª–æ —Å–æ—Å—É–Ω–∫–∏!",
            color=discord.Color.darker_gray()
        )   
    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        return interaction.user in self.players
    
    async def on_timeout(self):
        # –î–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ
        if not self.winner:
            await self.ctx.message.edit(embed=self.timeout_embed.format(self.players[0], self.players[1]), view=None)


    async def start_game(self, message: discord.Message = None, ready_m: discord.Message = None):
        # –û–ø–æ–≤–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
        if not message:
            self.time = random.randint(1, 6)
            view = self.StartGame(self.ctx, self.players)
            message = await self.ctx.channel.send(embed=self.description_embed.format(self.players[0].name, self.players[1].name, self.time), view=view)
            self.ctx = await bot.get_context(message)
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–∞–π–º–µ—Ä–∞
        else:
            view = self.StartGame(self.ctx, self.players)
            view.confirmed = [True]
            message = await message.edit(embed=self.description_embed.format(self.players[0].name, self.players[1].name, self.time), view=view)
            self.ctx = await bot.get_context(message)
        await view.wait()
        ready_m2 = discord.Message
        if ready_m:
            ready_m2 = ready_m
            
        ready_m = await atrys(self.ctx.send, f"**{view.confirmed[0].name if type(view.confirmed[0]) == discord.member.Member else view.confirmed[1].name}** –≥–æ—Ç–æ–≤üòé")
        
        if view.value is False:
            return await self.ctx.message.edit(embed=self.timeout_embed.format(self.players[0], self.players[1]), view=None)
        elif view.value is True and len(view.confirmed) < 2:
            return await self.start_game(message, ready_m)
        
        old_embed = self.start_embed
        self.start_embed.description = "–ñ–¥–∏ {} —Å–µ–∫—É–Ω–¥ –∏ —Å—Ç—Ä–µ–ª—è–π! ‚è±"
        
        await self.ctx.message.edit(embed=self.start_embed.format(self.players[0].name, self.players[1].name, self.time), view=None)
        await atrys(ready_m.delete)
        await atrys(ready_m2.delete)
        await asyncio.sleep(random.uniform(2, 3))  # –ù–µ–º–Ω–æ–≥–æ —Ä–∞–Ω–¥–æ–º–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∫–Ω–æ–ø–∫–∏
        self.start_embed = old_embed
        await self.ctx.message.edit(embed=self.start_embed.format(self.players[0].name, self.players[1].name, self.time), view=self)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        self.start_time = discord.utils.utcnow()

        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞
        await asyncio.sleep(7)  # –ò–≥—Ä–æ–∫–∞–º –¥–∞—ë—Ç—Å—è 7 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏

        if not self.winner:
            self.on_timeout()

    @private
    async def determine_winner(self):
        if not self.results:
            await self.ctx.message.edit(embed=self.timeout_embed.format(self.players[0], self.players[1]), view=None)
            return

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–∫—Ü–∏–∏ –±–ª–∏–∂–µ –∫ 7 —Å–µ–∫—É–Ω–¥–∞–º
        closest_player: discord.Member = min(self.results, key=lambda player: abs(self.results[player] - self.time))
        self.winner = closest_player
        self.loser = [p for p in self.players if p != self.winner][0]

        await self.ctx.message.edit(embed=self.end_embed.format(self.players[0].name, self.players[1].name, closest_player.mention, f"{self.time} (—Å–µ–∫—É–Ω–¥)", f'{self.results[self.winner]:.3f}', round(abs(self.results[closest_player] - self.time), 3), self.loser.mention, f'{self.results[self.loser]:.3f}', round(abs(self.results[self.loser] - self.time), 3)), view=None)
        await self.ctx.send(f"**{self.loser}** {random.choice(failed_texts)}\n-# –ò –æ—Ç–ª–µ—Ç–∞–µ—Ç –≤ –º—É—Ç –Ω–∞ **{self.mute}** –º–∏–Ω—É—Ç")
        
        try:
            await self.loser.timeout(datetime.now(jerusalem_tz) + timedelta(minutes=self.mute))
            info(f"{self.loser} was muted to {self.mute} minutes")
        except Exception as e:
            error(f"Timeout error: {e}")
        
        

    


class GamesCog(commands.Cog, name="Games"):
    
    """! GamesCog - –ö–æ–≥ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –∏–≥—Ä—ã"""

    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        
        """! –°–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–≥–∞"""
        
        info("GamesCog cog is ready")
        
        
    @commands.command(brief="–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞")
    async def rps(self, ctx: Ctx):
        await self.rock_paper_scissors(ctx)
            
    @commands.command(brief="–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞")
    async def rock_paper_scissors(self, ctx: Ctx):
        view = Rock_paper_scissors(ctx)
        ctx: discord.Message = await ctx.send(embed=view.embed, view=view)
        
        await view.wait()
        embed = discord.Embed(title="–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞", description="**–°–æ–ø–µ—Ä–Ω–∏–∫ —É–±–µ–∂–∞–ª...**", color=discord.Color.dark_gray())
        if view.winner is None:
            await ctx.edit(embed=embed, view=None)
        
    
    @commands.command(brief="–î—É—ç–ª—å")
    async def duel(self, ctx: Ctx, member: discord.Member = None):
        duel_invite = DuelGame.Confirm(ctx)
        
        if member is None:
            if ctx.message.reference.resolved.author:
                member = ctx.message.reference.resolved.author
            else:
                return await ctx.send("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å")
            
        message = await ctx.channel.send(content=f"# üß§\n{member.mention}\n\n**{ctx.message.author.mention} –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–µ–±—è –Ω–∞ –¥—É—ç–ª—å!**", view=duel_invite)
        duel_invite.message = message
        
        await duel_invite.wait()
        
        if duel_invite.value:
            duel = DuelGame(ctx)
            duel.players = [ctx.message.author, member]
            await duel.start_game()
        else:
            await ctx.reply(f"{member.mention} –∑–∞—Å—Å–∞–ªü§°")
    
    
    
    @commands.command(brief="–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞")
    async def rr(self, ctx: Ctx, member: discord.Member = None):
        await self.russian_roulette(ctx, member)

    @commands.command(brief="–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞")
    async def russian_roulette(self, ctx: Ctx, member: discord.Member = None):
        
        """! –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É"""
        
        if member:
            embed = discord.Embed(title=f"–¢–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –≤ –†—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É", description=f"–ß—Ç–æ –±—ã —Å—ã–≥—Ä–∞—Ç—å –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É `{PREFIX}russian_roulette`\n–£ —Ç–µ–±—è –ª–∏—à—å –æ–¥–Ω–∞ –∂–∏–∑–Ω—å.\n–ï—Å–ª–∏ –ø–æ–≥–∏–±–Ω–µ—à—å –ø–æ–ª—É—á–∏—à—å –º—É—Ç –Ω–∞ {MUTE} –º–∏–Ω—É—Ç", color=discord.Color.red())
            embed.set_footer(text=f"–ò–≥—Ä–∞ —Å {ctx.message.author.name}")
            
            await ctx.send(content=f"<@{member.id}>", embed=embed)
            await ctx.send( content=f"https://media1.tenor.com/m/lm8iTuh1lRIAAAAd/gun-weapon.gif")
        
        else:
            embed = discord.Embed(title="–†—É—Å—Å–∫–∞—è –†—É–ª–µ—Ç–∫–∞", description=f"–£ —Ç–µ–±—è –ª–∏—à—å –æ–¥–Ω–∞ –∂–∏–∑–Ω—å.\n–ï—Å–ª–∏ –ø–æ–≥–∏–±–Ω–µ—à—å –ø–æ–ª—É—á–∏—à—å –º—É—Ç –Ω–∞ {MUTE} –º–∏–Ω—É—Ç", color=discord.Color.red())
            
            view = Russian_roulette(ctx)
            
            await ctx.send(embed=embed, view=view)
            await view.wait()
            
            if view.value is None:
                info(ctx.channel.name + ': Russian Roulette: Timed out')
                await ctx.send('–í—Ä–µ–º—è –≤—ã—à–ª–æ —Å–æ—Å—É–Ω–æ–∫...')
                
            elif view.value:
                info(ctx.channel.name + ': Russian Roulette:  Russian_rouletteed')
                    
            else:
                info(ctx.channel.name + ': Russian Roulette:  Cancelled')
                
            if view.died:
                try:
                    await ctx.author.timeout(MUTE)
                    info(ctx.channel.name + ': Russian Roulette:  Muted')
                except Exception as e:
                        error(f"Timeout error: {e}")

async def setup(bot):
    await bot.add_cog(GamesCog(bot))