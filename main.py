import discord.ext.commands
from __init__ import *
import discord.ext

import argparse
import subprocess

# –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏")

# –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç
parser.add_argument('--disabled', type=bool, help='–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º', required=False)

# –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
args = parser.parse_args()._get_kwargs()

disabled = args[0][1]

print(f"Started at {Style.BRIGHT + 'normal' if not disabled else 'disabled'} mode")

bot = enabled_bot if not disabled else disabled_bot

if bot == disabled_bot:
    @bot.event
    async def on_connect():
        system("Main bot disabled")

    @bot.event  
    async def on_ready():
        system("Save bot ready")
        
    @bot.command() 
    async def ping(ctx: Ctx):
        await ctx.message.reply(f'Pong!\n-# **{round(bot.latency * 1000)}ms**')
        output(ctx.channel, f'Pong! {round(bot.latency * 1000)}ms')
        
    @bot.command()
    async def start(ctx: commands.Context):
        if ctx.message.author.id != 518516627629801494:
            await ctx.reply("*–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤*üíî")
            return

        await ctx.reply("–ë–æ—Ç –≤–∫–ª—é—á–µ–Ωüòé")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞
        await bot.close()

        # –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥
        system(Fore.RED + "Main bot started")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º os.execv –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        os.execv(sys.executable, ['python'] + [sys.argv[0]])
        



@bot.event
async def on_connect():
    print(f'{Fore.YELLOW}{Style.BRIGHT}=========================')
    print(f'Connection to discord.com')
    print(f'Token: {hide(TOKEN)}')
    print(f'ID: {bot.user.id}')
    print('Prefix:' + PREFIX )
    print(f'{Fore.YELLOW}{Style.BRIGHT}=========================')
    
    if bot == enabled_bot:
        await load_cogs()
    await bot.change_presence(status = discord.Status.idle, activity = discord.Game(name = "Zzzzzz..."))

@bot.event 
async def on_ready():
    print(f'{Fore.GREEN}{Style.BRIGHT}=========================')
    print(f'Bot logged in as - ')
    print(f'Username: {bot.user.name}')
    print(f'ID: {bot.user.id}')
    print(f'{Fore.GREEN}{Style.BRIGHT}=========================')
    print("Bot connected") 
    print(Style.BRIGHT + "\n\nLogs:\n")
     
    activity = discord.Activity(type=discord.ActivityType.watching, name="–≤–∏–¥–µ–æ –æ—Ç Laidfinüòé")
    if bot == enabled_bot:
        await bot.change_presence(status=discord.Status.online, activity=activity)
    else:
        await bot.change_presence(status=discord.Status.do_not_disturb, activity=discord.CustomActivity(name="–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ωüòø"))

@bot.command()
async def status(ctx: Ctx):
    embed = discord.Embed(title="–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", color=discord.Color.green() if bot == enabled_bot else discord.Color.red())
    embed.description=(f"–ë–æ—Ç –≤–∫–ª—é—á–µ–Ωüòé" if bot == enabled_bot else "–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ωüò¥")
    await ctx.reply(embed=embed)
    info(f"Bot status requested by {ctx.author.name}" + Fore.RED + f" ({"Enabled" if bot == enabled_bot else "Disabled"})")

@bot.command()
async def restart(ctx: Ctx):
    if ctx.message.author.id != 518516627629801494:
        await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤üíî")
        return
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    try:
        await ctx.reply("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω‚ôª")
    except:
        pass
    
    await bot.close()
    system(Fore.RED + "Bot restarted")

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –±–µ–∑ —É—á–∞—Å—Ç–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ
    os.execv(sys.executable, ['python'] + sys.argv + [f'{'--disabled DISABLED' if disabled else ""}'])
    
@bot.command()
async def kill_bot(ctx: Ctx):
    if ctx.author.id != 518516627629801494: # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ —Ü–µ–ª—è—Ö –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏.
        await ctx.reply("*–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤*üíî")
        return
    try:
        await ctx.reply("–ë–æ—Ç ***–£–ë–ò–¢***ü•µ")
    except:
        pass
    try:
        
        tasks = asyncio.all_tasks()
        active_tasks = [task for task in tasks if not task.done()]  # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á
        
        await asyncio.wait_for(bot.close(), timeout=5)
        
        system(Fore.RED + "Bot killed")
        
    except Exception as e:
        error("Failed to kill bot", e)
        await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±–∏—Ç—å –±–æ—Ç–∞‚ö†")

if bot == enabled_bot:

    @bot.command() 
    async def ping(ctx: Ctx):
        await ctx.reply(f'Pong!\n-# **{round(bot.latency * 1000)}ms**')
        output(ctx.channel, f'Pong! {round(bot.latency * 1000)}ms')
        
    @bot.command()
    async def stop(ctx: Ctx):
        if ctx.message.author.id != 518516627629801494:
            await ctx.reply("*–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤*üíî")
            return
        
        await ctx.reply("–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ωüò¥")
        await asyncio.wait_for(bot.close(), timeout=5)
        system(Fore.RED + "Bot stopped")
        
        os.execv(sys.executable, ['python'] + sys.argv + ['--disabled DISABLED'])
        exit()
        
class TextCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        
    @commands.Cog.listener()
    async def on_ready(self):
        info("Text cog is ready")
        
    @commands.command()
    @is_hellcat()
    async def t(self, ctx: Ctx, text):
        await bot.get_command('text').callback(self, ctx, text=text)

    @commands.command()
    @is_hellcat()
    async def text(self, ctx: Ctx, text):
        await ctx.message.delete()
        if ctx.message.reference:
            message = await ctx.fetch_message(ctx.message.reference.message_id)
            await message.reply(text)
        else:
            await ctx.send(text)
        output(ctx.channel, text)
        

    @commands.command()
    @is_hellcat()
    async def f(self, ctx: Ctx, count: int, text):
        await bot.get_command('flood').callback(self, ctx, count=count, text=text)
        
    @commands.command()
    @is_hellcat()
    async def flood(self, ctx: Ctx, count: int, text):
        if text == "":
            await ctx.reply("–ù–µ —É–º–µ—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        await ctx.message.delete()
        for i in range(count):
            await ctx.send(text)
        output(ctx.channel, f"Message {text} sent {count} times")
                

    @commands.command()
    @is_hellcat()
    async def c(self, ctx: Ctx, text=None):
        await bot.get_command('change').callback(self, ctx, text=text)

    @commands.command()
    @is_hellcat()
    async def change(self, ctx: Ctx, text=None):
            
            
        message: discord.Message = await ctx.fetch_message(ctx.message.reference.message_id)
        
        if not message.embeds and not text:
            await ctx.reply("–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        message = await message.edit(content=text)
        
        
        if message:
            output(ctx.channel, f"Message with id {message.id} successful edited")
            await ctx.reply(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
        
        

class LogCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        
    @commands.Cog.listener()
    async def on_ready(self):
        info("Log cog is ready")


    @commands.has_permissions(administrator=True)
    @commands.command()
    async def info(self, ctx: Ctx, *args):
        text = " ".join(args)
        info(text)
        await ctx.message.reply("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–æ–≥–∏ ;)")

    @commands.has_permissions(administrator=True)
    @commands.command()
    async def error(self, ctx: Ctx, *args):
        text = " ".join(args)
        error(text)
        await ctx.message.reply("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–æ–≥–∏ ;)")
        
    @commands.has_permissions(administrator=True)
    @commands.command()
    async def warning(self, ctx: Ctx, *args):
        text = " ".join(args)
        warning(text)
        await ctx.message.reply("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–æ–≥–∏ ;)")
        
    @commands.has_permissions(administrator=True)
    @commands.command()
    async def output(self, ctx: Ctx, *args):
        text = " ".join(args)
        output(ctx.channel, text)
        await ctx.message.reply("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–æ–≥–∏ ;)")
    

    

#        
#
# Main code end
#       
#


"""Cogs loading"""
async def load_cogs():
    for filename in os.listdir("./cogs"):
        if filename.endswith(".py"):
            try:
                await bot.load_extension(f"cogs.{filename[:-3]}")
            except Exception as e:
                error(f"Failed to load extension {filename}: {e}")
    await bot.add_cog(LogCog(bot))
    await bot.add_cog(TextCog(bot))

bot.run(TOKEN)